Sensor trigger mode control
===========================

The library now allows to change the trigger mode of the sensor between free-running and
externally triggered.

The library allows the following operations:

* Define in which trigger mode the sensor will run.
* Define the number of frames to capture/drop for each trigger depending on a flag.
* Define the delay in seconds after the external pin trigger the capture is started.

.. warning:: This functionality is only available for maintained hardware.
    See :ref:`supported_hardware` section.

.. note:: One can change the 3 parameters irrespective of the device being streaming or not.
    However the change will only take effect at the next start of the device.

The frame id attached to each frame is synchronized with the external trigger. Note however that
the first frame will be given the frame id 1.

When using an external trigger, all dynamic functionalities such as changing the frame rate
of the device are disabled.

In order to preserve the hardware, the stream is interrupted and an error is reported whenever:

* The time between 2 consecutive frames exceeds a certain timeout. The timeout is 3 and 10 seconds
  for free running trigger mode and external trigger mode respectively.
* The instantanous frame rate measured in the library exceeds the nominal frame rate the mode was 
  designed for. This is to ensure that eye safety is preserved when operating with an external trigger.


Changing trigger mode
---------------------

.. code-block:: c
    :linenos:


    #include <iostream>

    #include "iu456/iu456.h"

    int main()
    {
        iu456_error_details_t error_details;
        
        if (!iu456_initialize(nullptr, nullptr, nullptr, nullptr, &error_details))
        {
            std::cerr << "Failed initialize library: " << error_details.message << std::endl;
            return -1;
        }

        iu456_handle_t* handle = nullptr;

        if (!iu456_create(&handle, nullptr, nullptr, nullptr, &error_details))
        {
            std::cerr << "Failed to initialize device: " << error_details.message << std::endl;
            iu456_shutdown(&error_details);
            return -1;
        }

        // Get the currently selected mode
        const iu456_configuration_info_t* current_configuration = nullptr;
        if (!iu456_get_current_configuration(handle, &current_configuration, &error_details))
        {
            std::cerr << "Failed to get current configuration" << std::endl;
            iu456_destroy(handle, &error_details);
            iu456_shutdown(&error_details);
            return -1;
        }

        iu456_trigger_mode_t target_trigger_mode = iu456_trigger_mode_externally_triggered;
        if (!iu456_update_default_trigger_mode(handle, current_configuration->uid, target_trigger_mode, &error_details))
        {
            std::cerr << "Failed to change trigger mode: " << error_details.message << std::endl;
            iu456_destroy(handle, &error_details);
            iu456_shutdown(&error_details);
            return -1;
        }

        int number_of_frames_to_drop_between_triggers = 1;
        if (!iu456_update_default_trigger_factor(handle, current_configuration->uid, number_of_frames_to_drop_between_triggers, iu456_trigger_sampling_downsample, &error_details))
        {
            std::cerr << "Failed to set number of frames to collect: " << error_details.message << std::endl;
            iu456_destroy(handle, &error_details);
            iu456_shutdown(&error_details);
            return -1;
        }

        float delay = 0.01f;
        if (!iu456_update_default_trigger_delay(handle, current_configuration->uid, delay, &error_details))
        {
            std::cerr << "Failed to set delay for external trigger: " << error_details.message << std::endl;
            iu456_destroy(handle, &error_details);
            iu456_shutdown(&error_details);
            return -1;
        }

        iu456_destroy(handle, &error_details);
        iu456_shutdown(&error_details);

        return 0;
    }

